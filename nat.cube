Nat :: *;
Nat = forall (a::*) . a -> (a->a) -> a;

0 :: Nat;
0 = \ (a::*) (z::a) (s::a->a) -> z;

Succ :: Nat -> Nat;
Succ n = \ (a::*) (z::a) (s::a->a) -> s (n a z s);

nat :: forall (r::*) . (r->r) -> r -> Nat -> r;
nat r succ zero n = n r zero succ;

add :: Nat -> Nat -> Nat;
add x y = x Nat y (\ r :: Nat -> Succ r);

isZero :: Nat -> Bool;
isZero n = n Bool True (\ a::Bool -> False);

1 :: Nat;
1 = Succ 0;
2 :: Nat;
2 = Succ 1;
3 :: Nat;
3 = Succ 2;
