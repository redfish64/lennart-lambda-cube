Nat :: *;
Nat = forall (nat::*) . nat -> (nat->nat) -> nat;

0 :: Nat;
0 = \ (nat::*) (zero::nat) (succ::nat->nat) -> zero;

Succ :: Nat -> Nat;
Succ n = \ (nat::*) (zero::nat) (succ::nat->nat) -> succ (n nat zero succ);

natprim :: forall (r::*) . (r->r) -> r -> Nat -> r;
natprim r succ zero n = n r zero succ;

add :: Nat -> Nat -> Nat;
add x y = x Nat y (\ r :: Nat -> Succ r);

isZero :: Nat -> Bool;
isZero n = n Bool True (\ a::Bool -> False);

1 :: Nat;
1 = Succ 0;
2 :: Nat;
2 = Succ 1;
3 :: Nat;
3 = Succ 2;
